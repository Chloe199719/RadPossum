// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  Required for Next/Auth
model Account {
  id                String  @id @unique @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @unique @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified Boolean?
  discord       String?       @unique
  image         String?
  discriminator String?
  accounts      Account[]
  sessions      Session[]
  lessons       lessons[]
  LessonCodes   LessonCodes[]
  booking       booking[]
  posts         posts[]
  comments      comments[]
  commentsOLD   commentsOLD[]
  Like          Like[]
  isAdmin       Boolean       @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Questions {
  id       String @id @unique @default(cuid())
  question String
  answer   String
}

model SocialMedia {
  id              String @id @unique @default(cuid())
  name            String
  socialmedia_url String
}

model Aboutme {
  id   String @id @default(cuid())
  desc String
}

model hero {
  id           String @id @unique @default(cuid())
  titleFirst   String
  higlightText String
  mainText     String
  titleSec     String
}

model messages {
  id         String  @id @unique @default(cuid())
  name       String
  email      String
  discordID  String
  pronouns   String?
  message    String
  readSolved Boolean @default(false)
}

model lessons {
  id          String     @id @unique @default(cuid())
  User        User       @relation(fields: [userID], references: [id])
  userID      String
  lessonTitle String
  recording   String
  notes       String?
  homework    String?
  time        DateTime?  @db.Timestamptz()
  exercises   exercice[]
}

// Needs to be checked more fields might be needed
model exercice {
  id     String    @id @default(cuid())
  name   String
  desc   String
  lesson lessons[]
}

model Resources {
  id        String   @id @default(cuid())
  title     String
  audio     Audio[]
  body      String
  createdAT DateTime @default(now())
  updatedAT DateTime @default(now()) @updatedAt
}

model Audio {
  id       String      @id @default(cuid())
  title    String?
  url      String
  resource Resources[]
}

model LessonCodes {
  id                      String                   @id @unique @default(cuid())
  code                    String                   @unique
  used                    Boolean                  @default(false)
  public_or_private       String
  time                    String
  isValid                 Boolean                  @default(true)
  timeCreated             DateTime                 @default(now())
  user                    User                     @relation(fields: [userID], references: [id])
  userID                  String
  paypal_order_codes_logs paypal_order_codes_logs?
}

model booking {
  id                String             @id @unique @default(cuid())
  time              String
  transactionID     String?
  public_or_private String
  User              User               @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID            String
  canceled          Boolean            @default(false)
  bookedTime        String
  discordID         String
  message           String?
  completed         Boolean            @default(false)
  paypal_order_logs paypal_order_logs?
  email             String?
}

// Booking needs user and more 

model avaiable_hours {
  id   String @id @unique @default(cuid())
  hour Int    @unique
}

// Item Bought can have a Relation currently only ID Stringe identifier
model paypal_order_logs {
  id          String  @id @unique @default(cuid())
  invoice_id  String
  value       String
  booking     booking @relation(fields: [bookingId], references: [id])
  bookingId   String  @unique
  item_bought String
}

model paypal_items {
  id             String @id @unique @default(cuid())
  title          String
  duration       String
  privacy        String
  price_standard String
  price_saturday String
}

model stripes_items {
  id              String @id @unique @default(cuid())
  title           String
  saturdayPriceID String
  normalPriceID   String
  prodID          String
  privacy         String
  duration        String
}

model shop {
  id                      String                    @id @unique @default(cuid())
  title                   String
  desc                    String
  paypal_price            String
  stripes_ID              String
  image                   String
  privacy                 String
  duration                String
  paypal_order_codes_logs paypal_order_codes_logs[]
}

model paypal_order_codes_logs {
  id           String      @id @unique @default(cuid())
  invoice_id   String
  value        String
  item_bought  shop        @relation(fields: [shopID], references: [id])
  shopID       String
  lessonCode   LessonCodes @relation(fields: [lessonCodeID], references: [id])
  lessonCodeID String      @unique
}

model posts {
  id          String        @id @unique @default(cuid())
  title       String
  message     String
  createdAT   DateTime      @default(now())
  updatedAT   DateTime      @updatedAt
  user        User          @relation(fields: [userID], references: [id])
  userID      String
  comments    comments[]
  commentsOLD commentsOLD[]
}

model comments {
  id        String   @id @unique @default(cuid())
  post      posts    @relation(fields: [postID], references: [id])
  postID    String
  parentID  String?
  message   String
  edited    Boolean  @default(false)
  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  Like      Like[]
}

model commentsOLD {
  id        String   @id @unique @default(cuid())
  commentID String
  post      posts    @relation(fields: [postID], references: [id])
  postID    String
  parentID  String?
  message   String
  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
  user      User     @relation(fields: [userID], references: [id])
  userID    String
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}
